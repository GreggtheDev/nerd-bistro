package com.restaurant.service;

import com.restaurant.dao.OrderDao;
import com.restaurant.model.MenuItem;
import com.restaurant.model.Order;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesReportService {

    private static OrderDao orderDao;

    static {
        orderDao = new OrderDao();
        generateDailySalesReport();  // This will run when the class is loaded, but you might not want it to auto-generate here.
    }

    // Method to generate the daily sales report
    public static void generateDailySalesReport() {
        List<Order> orders = orderDao.getAllOrders();
        double totalRevenue = 0;
        Map<MenuItem, Integer> itemPopularity = new HashMap<>();
        Map<String, Double> tableRevenue = new HashMap<>();
        Map<Integer, Double> orderRevenue = new HashMap<>();

        // Calculate total revenue, item popularity, and table-wise revenue
        for (Order order : orders) {
            double orderTotal = order.getTotalPrice();
            totalRevenue += orderTotal;
            orderRevenue.put(order.getOrderId(), orderTotal);

            for (MenuItem item : order.getItems()) {
                itemPopularity.put(item, itemPopularity.getOrDefault(item, 0) + item.getQuantity());

                // Add the item's contribution to the total revenue from the most popular item
                tableRevenue.put("Table " + order.getTableId(), tableRevenue.getOrDefault("Table " + order.getTableId(), 0.0) + (item.getPrice() * item.getQuantity()));
            }
        }

        // Determine the most popular item
        MenuItem mostPopularItem = itemPopularity.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse(null);

        // Calculate the total revenue generated by the most popular item across all orders
        double revenueFromPopularItem = 0.0;
        if (mostPopularItem != null) {
            for (Map.Entry<MenuItem, Integer> entry : itemPopularity.entrySet()) {
                if (entry.getKey().equals(mostPopularItem)) {
                    revenueFromPopularItem += entry.getKey().getPrice() * entry.getValue();
                }
            }
        }

        // Generate the report string
        String report = generateReportString(totalRevenue, mostPopularItem, revenueFromPopularItem, tableRevenue, orderRevenue);

        // Display the report
        System.out.println(report);

        // Export the sales report to a text file
        exportSalesReport("daily_sales_report.txt", report);
    }

    // Method to generate the report string
    private static String generateReportString(double totalRevenue, MenuItem mostPopularItem,
                                               double revenueFromPopularItem, Map<String, Double> tableRevenue,
                                               Map<Integer, Double> orderRevenue) {
        StringBuilder reportBuilder = new StringBuilder();

        reportBuilder.append("Daily Sales Report\n");
        reportBuilder.append("===================\n");
        reportBuilder.append("Most Popular Item: ")
                .append(mostPopularItem != null ? mostPopularItem.getName() : "None").append("\n");
        reportBuilder.append("Revenue from Most Popular Item: $")
                .append(String.format("%.2f", revenueFromPopularItem)).append("\n");
        reportBuilder.append("\nTable-wise Revenue:\n");

        for (Map.Entry<String, Double> entry : tableRevenue.entrySet()) {
            reportBuilder.append(entry.getKey()).append(": $")
                    .append(String.format("%.2f", entry.getValue())).append("\n");
        }

        reportBuilder.append("\nOrder-wise Revenue:\n");
        for (Map.Entry<Integer, Double> entry : orderRevenue.entrySet()) {
            reportBuilder.append("Order ID ").append(entry.getKey()).append(": $")
                    .append(String.format("%.2f", entry.getValue())).append("\n");
        }

        reportBuilder.append("===================\n");
        reportBuilder.append("Total Revenue: $").append(String.format("%.2f", totalRevenue)).append("\n");
        reportBuilder.append("===================\n");
        reportBuilder.append("End of Report\n");

        return reportBuilder.toString();
    }

    // Method to export the sales report to a text file
    private static void exportSalesReport(String reportFileName, String reportContent) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(reportFileName))) {
            writer.write(reportContent);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
